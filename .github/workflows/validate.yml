name: Complete Project Validation - Multi-Component

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  validate-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v3
    
    - name: "üêç Set up Python 3.9"
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    # CHECK 1: Install requirements from all locations
    - name: "ÔøΩÔøΩ Check 1: Install dependencies"
      id: check-deps
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 1: Testing package installation..."
        echo "=========================================="
        
        INSTALL_SUCCESS=false
        
        # Check root directory
        if [ -f requirements.txt ]; then
          echo "Found requirements.txt in root"
          pip install -r requirements.txt && INSTALL_SUCCESS=true
        fi
        
        # Check api directory
        if [ -f api/requirements.txt ]; then
          echo "Found api/requirements.txt"
          cat api/requirements.txt
          echo "Installing API requirements..."
          pip install -r api/requirements.txt && INSTALL_SUCCESS=true
        fi
        
        # Check frontend directory
        if [ -f frontend/requirements.txt ]; then
          echo "Found frontend/requirements.txt"
          cat frontend/requirements.txt
          echo "Installing frontend requirements..."
          pip install -r frontend/requirements.txt && INSTALL_SUCCESS=true
        fi
        
        # Check backend directory (alternative naming)
        if [ -f backend/requirements.txt ]; then
          echo "Found backend/requirements.txt"
          pip install -r backend/requirements.txt && INSTALL_SUCCESS=true
        fi
        
        # Check for setup.py or pyproject.toml
        if [ -f setup.py ]; then
          echo "Found setup.py"
          pip install -e . && INSTALL_SUCCESS=true
        fi
        
        if [ "$INSTALL_SUCCESS" = true ]; then
          echo "‚úÖ SUCCESS: Dependencies installed"
          exit 0
        else
          echo "‚ùå FAILED: No dependencies could be installed"
          exit 1
        fi
    
    # CHECK 2: Python syntax - check all directories
    - name: "‚úîÔ∏è Check 2: Python syntax validation"
      id: check-syntax
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 2: Checking Python syntax..."
        echo "=========================================="
        
        ERROR_COUNT=0
        SUCCESS_COUNT=0
        
        # Find all Python files in all directories
        for file in $(find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*"); do
          echo "Checking: $file"
          if python -m py_compile "$file" 2>/dev/null; then
            echo "  ‚úì Syntax OK"
            ((SUCCESS_COUNT++))
          else
            echo "  ‚úó Syntax ERROR"
            python -m py_compile "$file" 2>&1 | head -3
            ((ERROR_COUNT++))
          fi
        done
        
        echo ""
        echo "Summary: $SUCCESS_COUNT files OK, $ERROR_COUNT files with errors"
        
        if [ $ERROR_COUNT -eq 0 ] && [ $SUCCESS_COUNT -gt 0 ]; then
          echo "‚úÖ SUCCESS: All Python files have valid syntax"
          exit 0
        elif [ $SUCCESS_COUNT -eq 0 ]; then
          echo "‚ùå FAILED: No Python files found"
          exit 1
        else
          echo "‚ùå FAILED: $ERROR_COUNT files have syntax errors"
          exit 1
        fi
    
    # CHECK 3: Test imports in all directories
    - name: "üì• Check 3: Test all imports"
      id: check-imports
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 3: Testing imports..."
        echo "=========================================="
        
        python << 'EOF'
        import os
        import ast
        import sys
        
        failed_imports = []
        successful_imports = []
        
        # Check all Python files
        for root, dirs, files in os.walk('.'):
            # Skip virtual environments and git
            dirs[:] = [d for d in dirs if d not in ['.git', 'venv', '.venv', '__pycache__', 'node_modules']]
            
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    print(f'Checking: {filepath}')
                    
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            tree = ast.parse(f.read())
                        
                        for node in ast.walk(tree):
                            if isinstance(node, ast.Import):
                                for name in node.names:
                                    try:
                                        __import__(name.name)
                                        successful_imports.append(name.name)
                                    except ImportError:
                                        failed_imports.append(f'{filepath}: {name.name}')
                            elif isinstance(node, ast.ImportFrom):
                                if node.module:
                                    try:
                                        __import__(node.module)
                                        successful_imports.append(node.module)
                                    except ImportError:
                                        failed_imports.append(f'{filepath}: {node.module}')
                    except Exception as e:
                        print(f'  Parse error: {str(e)[:50]}')
        
        print(f'\nImport Summary:')
        print(f'  Successful: {len(set(successful_imports))} unique modules')
        print(f'  Failed: {len(failed_imports)} imports')
        
        if len(failed_imports) > len(successful_imports) * 0.5:
            print('‚ùå FAILED: Too many import failures')
            sys.exit(1)
        else:
            print('‚úÖ SUCCESS: Most imports working')
            sys.exit(0)
        EOF
    
    # CHECK 4: Deprecation warnings
    - name: "‚ö†Ô∏è Check 4: Deprecation warnings"
      id: check-deprecation
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 4: Checking for deprecation warnings..."
        echo "=========================================="
        
        python -W all << 'EOF'
        import warnings
        import os
        
        warnings.filterwarnings('always')
        deprecation_found = False
        
        # Check main directories
        for directory in ['.', 'api', 'frontend', 'backend']:
            if os.path.exists(directory):
                print(f'Checking {directory}/ for deprecations...')
                # Just check that files are importable without deprecated features
        
        if not deprecation_found:
            print('‚úÖ SUCCESS: No major deprecation warnings')
        EOF
        exit 0
    
    # CHECK 5: Run tests
    - name: "üß™ Check 5: Run tests (if they exist)"
      id: check-tests
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 5: Looking for tests..."
        echo "=========================================="
        
        TEST_FOUND=false
        
        # Look for test files in all directories
        if find . -name "test_*.py" -o -name "*_test.py" -o -name "test*.py" | grep -q .; then
          echo "Test files found:"
          find . -name "test*.py" -o -name "*test*.py" | head -5
          TEST_FOUND=true
        fi
        
        # Check for test directories
        if [ -d "tests" ] || [ -d "test" ] || [ -d "api/tests" ] || [ -d "frontend/tests" ]; then
          echo "Test directories found"
          TEST_FOUND=true
        fi
        
        if [ "$TEST_FOUND" = true ]; then
          echo "‚úÖ SUCCESS: Test files/directories found"
          exit 0
        else
          echo "‚ùå FAILED: No tests found"
          exit 1
        fi
    
    # CHECK 6: Documentation
    - name: "üìö Check 6: Documentation check"
      id: check-docs
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 6: Checking documentation..."
        echo "=========================================="
        
        DOCS_SCORE=0
        
        # Check for README files
        if [ -f README.md ] || [ -f readme.md ] || [ -f README.rst ]; then
          echo "‚úì README found in root"
          ((DOCS_SCORE++))
          
          # Check README size
          if [ -f README.md ] && [ $(wc -l < README.md) -gt 20 ]; then
            echo "‚úì README has substantial content"
            ((DOCS_SCORE++))
          fi
        fi
        
        # Check for LICENSE
        if [ -f LICENSE ] || [ -f LICENSE.txt ] || [ -f LICENSE.md ]; then
          echo "‚úì LICENSE found"
          ((DOCS_SCORE++))
        fi
        
        # Check for documentation directories
        if [ -d docs ] || [ -d documentation ] || [ -f api/README.md ] || [ -f frontend/README.md ]; then
          echo "‚úì Additional documentation found"
          ((DOCS_SCORE++))
        fi
        
        echo "Documentation Score: $DOCS_SCORE"
        
        if [ $DOCS_SCORE -ge 2 ]; then
          echo "‚úÖ SUCCESS: Documentation is adequate"
          exit 0
        else
          echo "‚ùå FAILED: Insufficient documentation"
          exit 1
        fi
    
    # CHECK 7: Security
    - name: "üîí Check 7: Security vulnerability scan"
      id: check-security
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 7: Security scan..."
        echo "=========================================="
        
        # Install security tools
        pip install safety bandit 2>/dev/null || true
        
        # Run safety check on all requirements files
        for req_file in $(find . -name "requirements.txt"); do
          echo "Checking $req_file for vulnerabilities..."
          safety check -r "$req_file" 2>/dev/null || true
        done
        
        # Run bandit on Python files
        echo "Running bandit security scan..."
        bandit -r . -ll -i ./venv,./node_modules 2>/dev/null | head -30 || true
        
        echo "‚úÖ Security scan completed"
        exit 0
    
# FINAL SUMMARY - Simplified version that won't crash
    - name: "üìä Generate Final Report"
      if: always()
      run: |
        echo "=========================================="
        echo "       VALIDATION SUMMARY REPORT"
        echo "=========================================="
        echo ""
        
        # Count passes (simple approach)
        PASS_COUNT=0
        
        # Check each step outcome
        if [ "${{ steps.check-deps.outcome }}" == "success" ]; then
          echo "‚úÖ Requirements Installation: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Requirements Installation: FAILED"
        fi
        
        if [ "${{ steps.check-syntax.outcome }}" == "success" ]; then
          echo "‚úÖ Python Syntax: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Python Syntax: FAILED"
        fi
        
        if [ "${{ steps.check-imports.outcome }}" == "success" ]; then
          echo "‚úÖ Import Testing: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Import Testing: FAILED"
        fi
        
        if [ "${{ steps.check-deprecation.outcome }}" == "success" ]; then
          echo "‚úÖ Deprecation Check: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Deprecation Check: FAILED"
        fi
        
        if [ "${{ steps.check-tests.outcome }}" == "success" ]; then
          echo "‚úÖ Test Execution: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Test Execution: FAILED"
        fi
        
        if [ "${{ steps.check-docs.outcome }}" == "success" ]; then
          echo "‚úÖ Documentation: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Documentation: FAILED"
        fi
        
        if [ "${{ steps.check-security.outcome }}" == "success" ]; then
          echo "‚úÖ Security Scan: PASSED"
          PASS_COUNT=$((PASS_COUNT + 1))
        else
          echo "‚ùå Security Scan: FAILED"
        fi
        
        echo ""
        echo "=========================================="
        echo "TOTAL: $PASS_COUNT out of 7 checks passed"
        echo "=========================================="
        echo ""
        
        if [ $PASS_COUNT -ge 5 ]; then
          echo "üü¢ PROJECT STATUS: FUNCTIONAL"
          echo "    ‚Üí Mark as GREEN in Excel"
        else
          echo "üî¥ PROJECT STATUS: NOT FUNCTIONAL" 
          echo "    ‚Üí Mark as RED in Excel"
        fi