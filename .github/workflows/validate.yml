name: Complete Project Validation

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  validate-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v3
    
    - name: "üêç Set up Python 3.9"
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    # CHECK 1: Install requirements
    - name: "üì¶ Check 1: Install dependencies"
      id: check-deps
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 1: Testing package installation..."
        echo "=========================================="
        
        if [ -f requirements.txt ]; then
          echo "Found requirements.txt"
          cat requirements.txt
          echo ""
          echo "Installing packages..."
          pip install -r requirements.txt
          echo "‚úÖ SUCCESS: Requirements installed"
          exit 0
        elif [ -f setup.py ]; then
          echo "Found setup.py, installing..."
          pip install -e .
          echo "‚úÖ SUCCESS: Setup.py installed"
          exit 0
        elif [ -f pyproject.toml ]; then
          echo "Found pyproject.toml, installing..."
          pip install .
          echo "‚úÖ SUCCESS: pyproject.toml installed"
          exit 0
        else
          echo "‚ö†Ô∏è No requirements.txt, setup.py, or pyproject.toml found"
          echo "Looking for imports to auto-detect requirements..."
          
          # Try to auto-detect and install common requirements
          pip install azure-storage-blob azure-search-documents openai python-dotenv 2>/dev/null || true
          
          echo "‚ùå FAILED: No dependency file found"
          exit 1
        fi
    
    # CHECK 2: Python syntax
    - name: "‚úîÔ∏è Check 2: Python syntax"
      id: check-syntax
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 2: Checking Python syntax..."
        echo "=========================================="
        
        if ls *.py 1> /dev/null 2>&1; then
          for file in *.py; do
            echo "Checking: $file"
            python -m py_compile "$file" && echo "  ‚úì OK" || echo "  ‚úó ERROR"
          done
          echo "‚úÖ Syntax check completed"
          exit 0
        else
          echo "No Python files in root directory"
          exit 1
        fi
    
    # CHECK 3: Test imports
    - name: "üì• Check 3: Test imports"
      id: check-imports
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 3: Testing imports..."
        echo "=========================================="
        
        for file in *.py; do
          if [ -f "$file" ]; then
            echo "Testing imports in $file"
            python -c "import ast; ast.parse(open('$file').read())" && echo "  ‚úì Parseable" || echo "  ‚úó Parse error"
          fi
        done
        echo "‚úÖ Import check completed"
        exit 0
    
    # CHECK 4: Deprecation
    - name: "‚ö†Ô∏è Check 4: Deprecation warnings"
      id: check-deprecation
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 4: Deprecation check..."
        echo "=========================================="
        python -W all -c "print('Checking for deprecation warnings...')" 2>&1 | grep -i deprecat || echo "No deprecation warnings found"
        echo "‚úÖ Deprecation check completed"
        exit 0
    
    # CHECK 5: Tests
    - name: "üß™ Check 5: Tests"
      id: check-tests
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 5: Looking for tests..."
        echo "=========================================="
        
        if find . -name "test*.py" -o -name "*test.py" | grep -q .; then
          echo "‚úÖ Test files found"
          exit 0
        else
          echo "‚ùå No test files found"
          exit 1
        fi
    
    # CHECK 6: Documentation
    - name: "üìö Check 6: Documentation"
      id: check-docs
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 6: Checking documentation..."
        echo "=========================================="
        
        SCORE=0
        [ -f README.md ] && echo "‚úì README.md found" && ((SCORE++))
        [ -f LICENSE ] && echo "‚úì LICENSE found" && ((SCORE++))
        [ -d docs ] && echo "‚úì docs folder found" && ((SCORE++))
        
        if [ $SCORE -gt 0 ]; then
          echo "‚úÖ Documentation exists (Score: $SCORE)"
          exit 0
        else
          echo "‚ùå No documentation found"
          exit 1
        fi
    
    # CHECK 7: Security
    - name: "üîí Check 7: Security"
      id: check-security
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 7: Security scan..."
        echo "=========================================="
        pip install bandit 2>/dev/null || true
        bandit -r . -ll 2>/dev/null | head -20 || true
        echo "‚úÖ Security scan completed"
        exit 0
    
    # FINAL SUMMARY
    - name: "üìä Final Report"
      if: always()
      run: |
        echo "=========================================="
        echo "VALIDATION SUMMARY"
        echo "=========================================="
        
        PASS=0
        TOTAL=7
        
        echo -n "Requirements: "
        if [ "${{ steps.check-deps.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo -n "Syntax: "
        if [ "${{ steps.check-syntax.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo -n "Imports: "
        if [ "${{ steps.check-imports.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo -n "Deprecation: "
        if [ "${{ steps.check-deprecation.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo -n "Tests: "
        if [ "${{ steps.check-tests.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo -n "Documentation: "
        if [ "${{ steps.check-docs.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo -n "Security: "
        if [ "${{ steps.check-security.outcome }}" == "success" ]; then
          echo "‚úÖ PASSED"
          ((PASS++))
        else
          echo "‚ùå FAILED"
        fi
        
        echo ""
        echo "=========================================="
        echo "TOTAL: $PASS / $TOTAL checks passed"
        echo "=========================================="
        
        if [ $PASS -ge 5 ]; then
          echo ""
          echo "ÔøΩÔøΩ MARK AS GREEN IN EXCEL - Project is functional"
        else
          echo ""
          echo "üî¥ MARK AS RED IN EXCEL - Project has issues"
        fi
