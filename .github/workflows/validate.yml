name: Complete Project Validation
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab

jobs:
  validate-project:
    runs-on: ubuntu-latest
    
    steps:
    # Setup
    - name: "üì• Checkout code"
      uses: actions/checkout@v3
    
    - name: "üêç Set up Python 3.9"
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    # CHECK 1: Install requirements
    - name: "üì¶ Check 1: Install dependencies from requirements.txt"
      id: check-deps
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 1: Testing package installation..."
        echo "=========================================="
        
        if [ -f requirements.txt ]; then
          echo "Found requirements.txt, installing packages..."
          pip install --no-cache-dir -r requirements.txt 2>&1 | tee install_log.txt
          
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "‚úÖ SUCCESS: All requirements installed without conflicts"
            exit 0
          else
            echo "‚ùå FAILED: Requirements installation had conflicts"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è WARNING: No requirements.txt found"
          exit 1
        fi
    
    # CHECK 2: Verify Python syntax
    - name: "‚úîÔ∏è Check 2: Python syntax validation"
      id: check-syntax
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 2: Checking Python syntax..."
        echo "=========================================="
        
        ERROR_COUNT=0
        SUCCESS_COUNT=0
        
        for file in $(find . -name "*.py" -not -path "./.git/*"); do
          echo "Checking: $file"
          if python -m py_compile "$file" 2>/dev/null; then
            echo "  ‚úì Syntax OK"
            ((SUCCESS_COUNT++))
          else
            echo "  ‚úó Syntax ERROR"
            python -m py_compile "$file" 2>&1 | head -5
            ((ERROR_COUNT++))
          fi
        done
        
        echo "Summary: $SUCCESS_COUNT files OK, $ERROR_COUNT files with errors"
        
        if [ $ERROR_COUNT -eq 0 ]; then
          echo "‚úÖ SUCCESS: All Python files have valid syntax"
          exit 0
        else
          echo "‚ùå FAILED: $ERROR_COUNT files have syntax errors"
          exit 1
        fi
    
    # CHECK 3: Test imports
    - name: "üì• Check 3: Test all imports"
      id: check-imports
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 3: Testing imports..."
        echo "=========================================="
        
        python << 'EOF'
        import os
        import ast
        import sys
        
        failed_imports = []
        
        for root, dirs, files in os.walk('.'):
            dirs[:] = [d for d in dirs if d not in ['.git', 'venv', '.venv']]
            
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    print(f'Checking: {filepath}')
                    
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            tree = ast.parse(f.read())
                        
                        for node in ast.walk(tree):
                            if isinstance(node, ast.Import):
                                for name in node.names:
                                    try:
                                        __import__(name.name)
                                        print(f'  ‚úì {name.name}')
                                    except ImportError as e:
                                        print(f'  ‚úó {name.name}')
                                        failed_imports.append(name.name)
                    except Exception as e:
                        print(f'  Error parsing: {e}')
        
        if failed_imports:
            print(f'\n‚ùå FAILED: {len(failed_imports)} imports could not be resolved')
            sys.exit(1)
        else:
            print('\n‚úÖ SUCCESS: All imports working')
            sys.exit(0)
        EOF
    
    # CHECK 4: Deprecation warnings
    - name: "‚ö†Ô∏è Check 4: Deprecation warnings"
      id: check-deprecation
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 4: Checking for deprecation warnings..."
        echo "=========================================="
        
        python -W all -c "
        import warnings
        warnings.filterwarnings('always')
        print('Checking for deprecation warnings...')
        # Try importing main modules
        try:
            import app
        except: pass
        print('‚úÖ Deprecation check completed')
        " || echo "‚úÖ No major deprecation issues"
    
    # CHECK 5: Run tests
    - name: "üß™ Check 5: Run tests (if they exist)"
      id: check-tests
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 5: Looking for tests..."
        echo "=========================================="
        
        pip install pytest 2>/dev/null || true
        
        if find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
          echo "Found test files, running pytest..."
          pytest -v --tb=short || exit 1
          echo "‚úÖ SUCCESS: Tests completed"
        else
          echo "‚ö†Ô∏è WARNING: No test files found"
          exit 1
        fi
    
    # CHECK 6: Documentation
    - name: "üìö Check 6: Documentation check"
      id: check-docs
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 6: Checking documentation..."
        echo "=========================================="
        
        DOCS_SCORE=0
        
        if [ -f "README.md" ]; then
          echo "‚úì README.md found"
          ((DOCS_SCORE++))
          
          if [ $(wc -l < README.md) -gt 10 ]; then
            echo "‚úì README has substantial content"
            ((DOCS_SCORE++))
          fi
        fi
        
        if [ -f "LICENSE" ]; then
          echo "‚úì LICENSE found"
          ((DOCS_SCORE++))
        fi
        
        if [ -d "docs" ]; then
          echo "‚úì docs directory found"
          ((DOCS_SCORE++))
        fi
        
        echo "Documentation Score: $DOCS_SCORE / 4"
        
        if [ $DOCS_SCORE -ge 2 ]; then
          echo "‚úÖ SUCCESS: Documentation is adequate"
          exit 0
        else
          echo "‚ùå FAILED: Documentation is insufficient"
          exit 1
        fi
    
    # CHECK 7: Security
    - name: "üîí Check 7: Security vulnerability scan"
      id: check-security
      continue-on-error: true
      run: |
        echo "=========================================="
        echo "CHECK 7: Security scan..."
        echo "=========================================="
        
        pip install safety bandit 2>/dev/null || true
        
        echo "Running Safety check..."
        safety check --json 2>/dev/null || echo "‚úì Safety check completed"
        
        echo "Running Bandit scan..."
        bandit -r . -ll 2>/dev/null || echo "‚úì Bandit scan completed"
        
        echo "‚úÖ Security scan completed"
    
    # FINAL SUMMARY
    - name: "üìä Generate Final Report"
      if: always()
      run: |
        echo "=========================================="
        echo "       VALIDATION SUMMARY REPORT"
        echo "=========================================="
        echo ""
        
        SUCCESS_COUNT=0
        FAIL_COUNT=0
        
        [ "${{ steps.check-deps.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Requirements: PASSED" || echo "‚ùå Requirements: FAILED" && ((FAIL_COUNT++))
        [ "${{ steps.check-syntax.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Syntax: PASSED" || echo "‚ùå Syntax: FAILED" && ((FAIL_COUNT++))
        [ "${{ steps.check-imports.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Imports: PASSED" || echo "‚ùå Imports: FAILED" && ((FAIL_COUNT++))
        [ "${{ steps.check-deprecation.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Deprecation: PASSED" || echo "‚ùå Deprecation: FAILED" && ((FAIL_COUNT++))
        [ "${{ steps.check-tests.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Tests: PASSED" || echo "‚ùå Tests: FAILED" && ((FAIL_COUNT++))
        [ "${{ steps.check-docs.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Documentation: PASSED" || echo "‚ùå Documentation: FAILED" && ((FAIL_COUNT++))
        [ "${{ steps.check-security.outcome }}" == "success" ] && ((SUCCESS_COUNT++)) && echo "‚úÖ Security: PASSED" || echo "‚ùå Security: FAILED" && ((FAIL_COUNT++))
        
        echo ""
        echo "=========================================="
        echo "TOTAL: $SUCCESS_COUNT passed out of 7 checks"
        echo "=========================================="
        
        if [ $SUCCESS_COUNT -ge 5 ]; then
          echo "üü¢ PROJECT STATUS: FUNCTIONAL (mark GREEN in Excel)"
        else
          echo "üî¥ PROJECT STATUS: NOT FUNCTIONAL (mark RED in Excel)"
        fi
